#!/bin/ash

# Installer generated by FirmwarePackager.
# Verifies files listed in manifest.tsv using MD5 hashes and performs
# atomic updates with rollback support.

set -e

PKG_ID="@PKG_ID@"
PKG_NAME="@PKG_NAME@"
PKG_VERSION="@PKG_VERSION@"

STATE_DIR="/opt/upgrade/state"
PKG_DIR="/opt/upgrade/packages"
BACKUP_DIR="/opt/upgrade/backup/${PKG_ID}"
STATE_FILE="${STATE_DIR}/${PKG_ID}.state"
JOURNAL="${STATE_DIR}/${PKG_ID}.journal"
PKG_TGZ="${PKG_DIR}/${PKG_ID}.tgz"

STATUS="INIT"
STEP=""
LAST_FILE=""

write_state() {
cat >"$STATE_FILE" <<STATE
STATUS=$STATUS
STEP=$STEP
JOURNAL=$JOURNAL
PKG_TGZ=$PKG_TGZ
LAST_FILE=$LAST_FILE
STATE
}

rollback() {
    [ -f "$JOURNAL" ] || return 0
    awk '{l[NR]=$0} END{for(i=NR;i>=1;i--) print l[i]}' "$JOURNAL" | while read f; do
        if [ -f "$f.old" ]; then
            mv "$f.old" "$f"
        else
            rm -f "$f"
        fi
    done
}

fail() {
    trap - EXIT
    STATUS="ERROR"
    write_state
    rollback
    exit 1
}

cleanup_success() {
    if [ -f "$JOURNAL" ]; then
        while read f; do
            rm -f "$f.old"
        done < "$JOURNAL"
    fi
    rm -f "$JOURNAL"
    rm -rf "$BACKUP_DIR"
    rm -f "$PKG_TGZ"
}

trap fail INT TERM HUP QUIT
trap fail EXIT

mkdir -p "$STATE_DIR" "$PKG_DIR" "$BACKUP_DIR"
: > "$JOURNAL"

BASE_DIR=$(cd "$(dirname "$0")/.." && pwd)

STATUS="RUNNING"
STEP="install"
write_state

{
    read -r _header
    while IFS="$(printf '\t')" read -r rel dest mode owner group md5; do
        LAST_FILE="$dest"
        write_state

        calc=$(md5sum "$BASE_DIR/$rel" | awk '{print $1}')
        [ "$calc" = "$md5" ] || fail

        ddir=$(dirname "$dest")
        mkdir -p "$ddir"

        if [ -f "$dest" ]; then
            backup="$BACKUP_DIR/$dest"
            mkdir -p "$(dirname "$backup")"
            cp "$dest" "$backup"
            mv "$dest" "$dest.old"
        fi

        cp "$BASE_DIR/$rel" "$dest.new"
        chmod "$mode" "$dest.new" 2>/dev/null || true
        mv "$dest.new" "$dest"
        echo "$dest" >> "$JOURNAL"

    done
} < "$BASE_DIR/manifest.tsv"

trap - EXIT
STATUS="DONE"
STEP="done"
LAST_FILE=""
write_state
cleanup_success
exit 0
